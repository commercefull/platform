import express from "express";
import { InventoryController } from "./controllers/inventoryController";
import { InventoryRepo } from "./repos/inventoryRepo";

const router = express.Router();
const inventoryController = new InventoryController();

// Public routes for inventory information
// These provide limited access compared to admin routes

// Product availability check (for product detail pages)
router.get("/products/:productId/availability", inventoryController.checkProductAvailability);

// Get inventory by product ID (modified to show limited information)
router.get("/products/:productId/inventory", async (req: any, res: any) => {
  try {
    const inventoryRepo = new InventoryRepo();
    const items = await inventoryRepo.findInventoryItemsByProductId(req.params.productId);
    
    // Return simplified inventory information without internal details
    const publicItems = items.map(item => ({
      locationId: item.locationId,
      inStock: item.availableQuantity > 0,
      availableQuantity: item.availableQuantity,
      lowStock: item.availableQuantity <= item.lowStockThreshold && item.availableQuantity > 0
    }));
    
    res.status(200).json({
      success: true,
      data: publicItems
    });
  } catch (error) {
    console.error('Error fetching product inventory:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch product inventory'
    });
  }
});

// Get inventory for a specific location (for store pages)
router.get("/locations/:id/availability", async (req: any, res: any) => {
  try {
    const inventoryRepo = new InventoryRepo();
    
    // Verify location exists and is active
    const location = await inventoryRepo.findLocationById(req.params.id);
    if (!location || !location.isActive) {
      return res.status(404).json({
        success: false,
        message: "Location not found"
      });
    }
    
    // Get product IDs if provided
    const productIds = req.query.productIds ? req.query.productIds.split(',') : [];
    
    // Get inventory for this location
    const items = await inventoryRepo.findInventoryItemsByLocationId(req.params.id);
    
    // Filter by product IDs if provided
    const filteredItems = productIds.length > 0 
      ? items.filter(item => productIds.includes(item.productId))
      : items;
    
    // Return simplified inventory information
    const publicItems = filteredItems.map(item => ({
      productId: item.productId,
      sku: item.sku,
      inStock: item.availableQuantity > 0,
      availableQuantity: item.availableQuantity,
      lowStock: item.availableQuantity <= item.lowStockThreshold && item.availableQuantity > 0
    }));
    
    res.status(200).json({
      success: true,
      data: {
        locationId: location.id,
        locationName: location.name,
        items: publicItems
      }
    });
  } catch (error) {
    console.error('Error fetching location inventory:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch location inventory'
    });
  }
});

// Reserve inventory for a cart
router.post("/cart/:cartId/reserve", async (req: any, res: any) => {
  try {
    const { cartId } = req.params;
    const { items } = req.body;
    
    if (!items || !Array.isArray(items) || items.length === 0) {
      return res.status(400).json({
        success: false,
        message: "Items array is required and cannot be empty"
      });
    }
    
    const inventoryRepo = new InventoryRepo();
    const results = [];
    const errors = [];
    
    // Calculate expiration time (e.g., 30 minutes from now)
    const expiresAt = new Date();
    expiresAt.setMinutes(expiresAt.getMinutes() + 30);
    
    // Process each item
    for (const item of items) {
      const { inventoryId, quantity } = item;
      
      if (!inventoryId || !quantity) {
        errors.push({ item, message: "inventoryId and quantity are required" });
        continue;
      }
      
      try {
        // Create reservation
        const reservation = await inventoryRepo.createReservation({
          inventoryId,
          quantity,
          cartId,
          expiresAt: expiresAt.toISOString(),
          status: 'active'
        });
        
        results.push(reservation);
      } catch (error) {
        errors.push({ 
          item, 
          message: (error as Error).message 
        });
      }
    }
    
    res.status(200).json({
      success: true,
      data: {
        reservations: results,
        errors: errors.length > 0 ? errors : undefined
      },
      message: errors.length > 0 
        ? "Some items could not be reserved" 
        : "Items reserved successfully"
    });
  } catch (error) {
    console.error('Error reserving inventory for cart:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to reserve inventory',
      error: (error as Error).message
    });
  }
});

// Get cart reservations
router.get("/cart/:cartId/reservations", inventoryController.getReservationsByCartId);

// Release cart reservations
router.post("/cart/:cartId/release", async (req: any, res: any) => {
  try {
    const { cartId } = req.params;
    const inventoryRepo = new InventoryRepo();
    
    // Find active reservations for this cart
    const reservations = await inventoryRepo.findReservationsByCartId(cartId);
    
    if (reservations.length === 0) {
      return res.status(404).json({
        success: false,
        message: "No active reservations found for this cart"
      });
    }
    
    const results = [];
    const errors = [];
    
    // Cancel each reservation
    for (const reservation of reservations) {
      try {
        const updated = await inventoryRepo.updateReservationStatus(reservation.id, 'cancelled');
        results.push(updated);
      } catch (error) {
        errors.push({
          reservationId: reservation.id,
          message: (error as Error).message
        });
      }
    }
    
    res.status(200).json({
      success: true,
      data: {
        released: results,
        errors: errors.length > 0 ? errors : undefined
      },
      message: errors.length > 0 
        ? "Some reservations could not be released" 
        : "Reservations released successfully"
    });
  } catch (error) {
    console.error('Error releasing cart reservations:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to release reservations',
      error: (error as Error).message
    });
  }
});

export const inventoryRouter = router;
